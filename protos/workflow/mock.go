// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package workflow

import (
	"context"
	"sync"

	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// Ensure, that WorkflowServiceClientMock does implement WorkflowServiceClient.
// If this is not the case, regenerate this file with moq.
var _ WorkflowServiceClient = &WorkflowServiceClientMock{}

// WorkflowServiceClientMock is a mock implementation of WorkflowServiceClient.
//
//     func TestSomethingThatUsesWorkflowServiceClient(t *testing.T) {
//
//         // make and configure a mocked WorkflowServiceClient
//         mockedWorkflowServiceClient := &WorkflowServiceClientMock{
//             CreateWorkflowFunc: func(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
// 	               panic("mock out the CreateWorkflow method")
//             },
//             DeleteWorkflowFunc: func(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Empty, error) {
// 	               panic("mock out the DeleteWorkflow method")
//             },
//             GetWorkflowFunc: func(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Workflow, error) {
// 	               panic("mock out the GetWorkflow method")
//             },
//             GetWorkflowActionsFunc: func(ctx context.Context, in *WorkflowActionsRequest, opts ...grpc.CallOption) (*WorkflowActionList, error) {
// 	               panic("mock out the GetWorkflowActions method")
//             },
//             GetWorkflowContextFunc: func(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*WorkflowContext, error) {
// 	               panic("mock out the GetWorkflowContext method")
//             },
//             GetWorkflowContextListFunc: func(ctx context.Context, in *WorkflowContextRequest, opts ...grpc.CallOption) (*WorkflowContextList, error) {
// 	               panic("mock out the GetWorkflowContextList method")
//             },
//             GetWorkflowContextsFunc: func(ctx context.Context, in *WorkflowContextRequest, opts ...grpc.CallOption) (WorkflowService_GetWorkflowContextsClient, error) {
// 	               panic("mock out the GetWorkflowContexts method")
//             },
//             GetWorkflowDataFunc: func(ctx context.Context, in *GetWorkflowDataRequest, opts ...grpc.CallOption) (*GetWorkflowDataResponse, error) {
// 	               panic("mock out the GetWorkflowData method")
//             },
//             GetWorkflowDataVersionFunc: func(ctx context.Context, in *GetWorkflowDataRequest, opts ...grpc.CallOption) (*GetWorkflowDataResponse, error) {
// 	               panic("mock out the GetWorkflowDataVersion method")
//             },
//             GetWorkflowMetadataFunc: func(ctx context.Context, in *GetWorkflowDataRequest, opts ...grpc.CallOption) (*GetWorkflowDataResponse, error) {
// 	               panic("mock out the GetWorkflowMetadata method")
//             },
//             ListWorkflowsFunc: func(ctx context.Context, in *Empty, opts ...grpc.CallOption) (WorkflowService_ListWorkflowsClient, error) {
// 	               panic("mock out the ListWorkflows method")
//             },
//             ReportActionStatusFunc: func(ctx context.Context, in *WorkflowActionStatus, opts ...grpc.CallOption) (*Empty, error) {
// 	               panic("mock out the ReportActionStatus method")
//             },
//             ShowWorkflowEventsFunc: func(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (WorkflowService_ShowWorkflowEventsClient, error) {
// 	               panic("mock out the ShowWorkflowEvents method")
//             },
//             UpdateWorkflowDataFunc: func(ctx context.Context, in *UpdateWorkflowDataRequest, opts ...grpc.CallOption) (*Empty, error) {
// 	               panic("mock out the UpdateWorkflowData method")
//             },
//         }
//
//         // use mockedWorkflowServiceClient in code that requires WorkflowServiceClient
//         // and then make assertions.
//
//     }
type WorkflowServiceClientMock struct {
	// CreateWorkflowFunc mocks the CreateWorkflow method.
	CreateWorkflowFunc func(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)

	// DeleteWorkflowFunc mocks the DeleteWorkflow method.
	DeleteWorkflowFunc func(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Empty, error)

	// GetWorkflowFunc mocks the GetWorkflow method.
	GetWorkflowFunc func(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Workflow, error)

	// GetWorkflowActionsFunc mocks the GetWorkflowActions method.
	GetWorkflowActionsFunc func(ctx context.Context, in *WorkflowActionsRequest, opts ...grpc.CallOption) (*WorkflowActionList, error)

	// GetWorkflowContextFunc mocks the GetWorkflowContext method.
	GetWorkflowContextFunc func(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*WorkflowContext, error)

	// GetWorkflowContextListFunc mocks the GetWorkflowContextList method.
	GetWorkflowContextListFunc func(ctx context.Context, in *WorkflowContextRequest, opts ...grpc.CallOption) (*WorkflowContextList, error)

	// GetWorkflowContextsFunc mocks the GetWorkflowContexts method.
	GetWorkflowContextsFunc func(ctx context.Context, in *WorkflowContextRequest, opts ...grpc.CallOption) (WorkflowService_GetWorkflowContextsClient, error)

	// GetWorkflowDataFunc mocks the GetWorkflowData method.
	GetWorkflowDataFunc func(ctx context.Context, in *GetWorkflowDataRequest, opts ...grpc.CallOption) (*GetWorkflowDataResponse, error)

	// GetWorkflowDataVersionFunc mocks the GetWorkflowDataVersion method.
	GetWorkflowDataVersionFunc func(ctx context.Context, in *GetWorkflowDataRequest, opts ...grpc.CallOption) (*GetWorkflowDataResponse, error)

	// GetWorkflowMetadataFunc mocks the GetWorkflowMetadata method.
	GetWorkflowMetadataFunc func(ctx context.Context, in *GetWorkflowDataRequest, opts ...grpc.CallOption) (*GetWorkflowDataResponse, error)

	// ListWorkflowsFunc mocks the ListWorkflows method.
	ListWorkflowsFunc func(ctx context.Context, in *Empty, opts ...grpc.CallOption) (WorkflowService_ListWorkflowsClient, error)

	// ReportActionStatusFunc mocks the ReportActionStatus method.
	ReportActionStatusFunc func(ctx context.Context, in *WorkflowActionStatus, opts ...grpc.CallOption) (*Empty, error)

	// ShowWorkflowEventsFunc mocks the ShowWorkflowEvents method.
	ShowWorkflowEventsFunc func(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (WorkflowService_ShowWorkflowEventsClient, error)

	// UpdateWorkflowDataFunc mocks the UpdateWorkflowData method.
	UpdateWorkflowDataFunc func(ctx context.Context, in *UpdateWorkflowDataRequest, opts ...grpc.CallOption) (*Empty, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateWorkflow holds details about calls to the CreateWorkflow method.
		CreateWorkflow []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *CreateRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// DeleteWorkflow holds details about calls to the DeleteWorkflow method.
		DeleteWorkflow []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *GetRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// GetWorkflow holds details about calls to the GetWorkflow method.
		GetWorkflow []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *GetRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// GetWorkflowActions holds details about calls to the GetWorkflowActions method.
		GetWorkflowActions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *WorkflowActionsRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// GetWorkflowContext holds details about calls to the GetWorkflowContext method.
		GetWorkflowContext []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *GetRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// GetWorkflowContextList holds details about calls to the GetWorkflowContextList method.
		GetWorkflowContextList []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *WorkflowContextRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// GetWorkflowContexts holds details about calls to the GetWorkflowContexts method.
		GetWorkflowContexts []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *WorkflowContextRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// GetWorkflowData holds details about calls to the GetWorkflowData method.
		GetWorkflowData []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *GetWorkflowDataRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// GetWorkflowDataVersion holds details about calls to the GetWorkflowDataVersion method.
		GetWorkflowDataVersion []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *GetWorkflowDataRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// GetWorkflowMetadata holds details about calls to the GetWorkflowMetadata method.
		GetWorkflowMetadata []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *GetWorkflowDataRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// ListWorkflows holds details about calls to the ListWorkflows method.
		ListWorkflows []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *Empty
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// ReportActionStatus holds details about calls to the ReportActionStatus method.
		ReportActionStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *WorkflowActionStatus
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// ShowWorkflowEvents holds details about calls to the ShowWorkflowEvents method.
		ShowWorkflowEvents []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *GetRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// UpdateWorkflowData holds details about calls to the UpdateWorkflowData method.
		UpdateWorkflowData []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *UpdateWorkflowDataRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
	}
	lockCreateWorkflow         sync.RWMutex
	lockDeleteWorkflow         sync.RWMutex
	lockGetWorkflow            sync.RWMutex
	lockGetWorkflowActions     sync.RWMutex
	lockGetWorkflowContext     sync.RWMutex
	lockGetWorkflowContextList sync.RWMutex
	lockGetWorkflowContexts    sync.RWMutex
	lockGetWorkflowData        sync.RWMutex
	lockGetWorkflowDataVersion sync.RWMutex
	lockGetWorkflowMetadata    sync.RWMutex
	lockListWorkflows          sync.RWMutex
	lockReportActionStatus     sync.RWMutex
	lockShowWorkflowEvents     sync.RWMutex
	lockUpdateWorkflowData     sync.RWMutex
}

// CreateWorkflow calls CreateWorkflowFunc.
func (mock *WorkflowServiceClientMock) CreateWorkflow(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	if mock.CreateWorkflowFunc == nil {
		panic("WorkflowServiceClientMock.CreateWorkflowFunc: method is nil but WorkflowServiceClient.CreateWorkflow was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *CreateRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockCreateWorkflow.Lock()
	mock.calls.CreateWorkflow = append(mock.calls.CreateWorkflow, callInfo)
	mock.lockCreateWorkflow.Unlock()
	return mock.CreateWorkflowFunc(ctx, in, opts...)
}

// CreateWorkflowCalls gets all the calls that were made to CreateWorkflow.
// Check the length with:
//     len(mockedWorkflowServiceClient.CreateWorkflowCalls())
func (mock *WorkflowServiceClientMock) CreateWorkflowCalls() []struct {
	Ctx  context.Context
	In   *CreateRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *CreateRequest
		Opts []grpc.CallOption
	}
	mock.lockCreateWorkflow.RLock()
	calls = mock.calls.CreateWorkflow
	mock.lockCreateWorkflow.RUnlock()
	return calls
}

// DeleteWorkflow calls DeleteWorkflowFunc.
func (mock *WorkflowServiceClientMock) DeleteWorkflow(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Empty, error) {
	if mock.DeleteWorkflowFunc == nil {
		panic("WorkflowServiceClientMock.DeleteWorkflowFunc: method is nil but WorkflowServiceClient.DeleteWorkflow was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *GetRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockDeleteWorkflow.Lock()
	mock.calls.DeleteWorkflow = append(mock.calls.DeleteWorkflow, callInfo)
	mock.lockDeleteWorkflow.Unlock()
	return mock.DeleteWorkflowFunc(ctx, in, opts...)
}

// DeleteWorkflowCalls gets all the calls that were made to DeleteWorkflow.
// Check the length with:
//     len(mockedWorkflowServiceClient.DeleteWorkflowCalls())
func (mock *WorkflowServiceClientMock) DeleteWorkflowCalls() []struct {
	Ctx  context.Context
	In   *GetRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *GetRequest
		Opts []grpc.CallOption
	}
	mock.lockDeleteWorkflow.RLock()
	calls = mock.calls.DeleteWorkflow
	mock.lockDeleteWorkflow.RUnlock()
	return calls
}

// GetWorkflow calls GetWorkflowFunc.
func (mock *WorkflowServiceClientMock) GetWorkflow(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Workflow, error) {
	if mock.GetWorkflowFunc == nil {
		panic("WorkflowServiceClientMock.GetWorkflowFunc: method is nil but WorkflowServiceClient.GetWorkflow was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *GetRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetWorkflow.Lock()
	mock.calls.GetWorkflow = append(mock.calls.GetWorkflow, callInfo)
	mock.lockGetWorkflow.Unlock()
	return mock.GetWorkflowFunc(ctx, in, opts...)
}

// GetWorkflowCalls gets all the calls that were made to GetWorkflow.
// Check the length with:
//     len(mockedWorkflowServiceClient.GetWorkflowCalls())
func (mock *WorkflowServiceClientMock) GetWorkflowCalls() []struct {
	Ctx  context.Context
	In   *GetRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *GetRequest
		Opts []grpc.CallOption
	}
	mock.lockGetWorkflow.RLock()
	calls = mock.calls.GetWorkflow
	mock.lockGetWorkflow.RUnlock()
	return calls
}

// GetWorkflowActions calls GetWorkflowActionsFunc.
func (mock *WorkflowServiceClientMock) GetWorkflowActions(ctx context.Context, in *WorkflowActionsRequest, opts ...grpc.CallOption) (*WorkflowActionList, error) {
	if mock.GetWorkflowActionsFunc == nil {
		panic("WorkflowServiceClientMock.GetWorkflowActionsFunc: method is nil but WorkflowServiceClient.GetWorkflowActions was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *WorkflowActionsRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetWorkflowActions.Lock()
	mock.calls.GetWorkflowActions = append(mock.calls.GetWorkflowActions, callInfo)
	mock.lockGetWorkflowActions.Unlock()
	return mock.GetWorkflowActionsFunc(ctx, in, opts...)
}

// GetWorkflowActionsCalls gets all the calls that were made to GetWorkflowActions.
// Check the length with:
//     len(mockedWorkflowServiceClient.GetWorkflowActionsCalls())
func (mock *WorkflowServiceClientMock) GetWorkflowActionsCalls() []struct {
	Ctx  context.Context
	In   *WorkflowActionsRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *WorkflowActionsRequest
		Opts []grpc.CallOption
	}
	mock.lockGetWorkflowActions.RLock()
	calls = mock.calls.GetWorkflowActions
	mock.lockGetWorkflowActions.RUnlock()
	return calls
}

// GetWorkflowContext calls GetWorkflowContextFunc.
func (mock *WorkflowServiceClientMock) GetWorkflowContext(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*WorkflowContext, error) {
	if mock.GetWorkflowContextFunc == nil {
		panic("WorkflowServiceClientMock.GetWorkflowContextFunc: method is nil but WorkflowServiceClient.GetWorkflowContext was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *GetRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetWorkflowContext.Lock()
	mock.calls.GetWorkflowContext = append(mock.calls.GetWorkflowContext, callInfo)
	mock.lockGetWorkflowContext.Unlock()
	return mock.GetWorkflowContextFunc(ctx, in, opts...)
}

// GetWorkflowContextCalls gets all the calls that were made to GetWorkflowContext.
// Check the length with:
//     len(mockedWorkflowServiceClient.GetWorkflowContextCalls())
func (mock *WorkflowServiceClientMock) GetWorkflowContextCalls() []struct {
	Ctx  context.Context
	In   *GetRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *GetRequest
		Opts []grpc.CallOption
	}
	mock.lockGetWorkflowContext.RLock()
	calls = mock.calls.GetWorkflowContext
	mock.lockGetWorkflowContext.RUnlock()
	return calls
}

// GetWorkflowContextList calls GetWorkflowContextListFunc.
func (mock *WorkflowServiceClientMock) GetWorkflowContextList(ctx context.Context, in *WorkflowContextRequest, opts ...grpc.CallOption) (*WorkflowContextList, error) {
	if mock.GetWorkflowContextListFunc == nil {
		panic("WorkflowServiceClientMock.GetWorkflowContextListFunc: method is nil but WorkflowServiceClient.GetWorkflowContextList was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *WorkflowContextRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetWorkflowContextList.Lock()
	mock.calls.GetWorkflowContextList = append(mock.calls.GetWorkflowContextList, callInfo)
	mock.lockGetWorkflowContextList.Unlock()
	return mock.GetWorkflowContextListFunc(ctx, in, opts...)
}

// GetWorkflowContextListCalls gets all the calls that were made to GetWorkflowContextList.
// Check the length with:
//     len(mockedWorkflowServiceClient.GetWorkflowContextListCalls())
func (mock *WorkflowServiceClientMock) GetWorkflowContextListCalls() []struct {
	Ctx  context.Context
	In   *WorkflowContextRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *WorkflowContextRequest
		Opts []grpc.CallOption
	}
	mock.lockGetWorkflowContextList.RLock()
	calls = mock.calls.GetWorkflowContextList
	mock.lockGetWorkflowContextList.RUnlock()
	return calls
}

// GetWorkflowContexts calls GetWorkflowContextsFunc.
func (mock *WorkflowServiceClientMock) GetWorkflowContexts(ctx context.Context, in *WorkflowContextRequest, opts ...grpc.CallOption) (WorkflowService_GetWorkflowContextsClient, error) {
	if mock.GetWorkflowContextsFunc == nil {
		panic("WorkflowServiceClientMock.GetWorkflowContextsFunc: method is nil but WorkflowServiceClient.GetWorkflowContexts was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *WorkflowContextRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetWorkflowContexts.Lock()
	mock.calls.GetWorkflowContexts = append(mock.calls.GetWorkflowContexts, callInfo)
	mock.lockGetWorkflowContexts.Unlock()
	return mock.GetWorkflowContextsFunc(ctx, in, opts...)
}

// GetWorkflowContextsCalls gets all the calls that were made to GetWorkflowContexts.
// Check the length with:
//     len(mockedWorkflowServiceClient.GetWorkflowContextsCalls())
func (mock *WorkflowServiceClientMock) GetWorkflowContextsCalls() []struct {
	Ctx  context.Context
	In   *WorkflowContextRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *WorkflowContextRequest
		Opts []grpc.CallOption
	}
	mock.lockGetWorkflowContexts.RLock()
	calls = mock.calls.GetWorkflowContexts
	mock.lockGetWorkflowContexts.RUnlock()
	return calls
}

// GetWorkflowData calls GetWorkflowDataFunc.
func (mock *WorkflowServiceClientMock) GetWorkflowData(ctx context.Context, in *GetWorkflowDataRequest, opts ...grpc.CallOption) (*GetWorkflowDataResponse, error) {
	if mock.GetWorkflowDataFunc == nil {
		panic("WorkflowServiceClientMock.GetWorkflowDataFunc: method is nil but WorkflowServiceClient.GetWorkflowData was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *GetWorkflowDataRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetWorkflowData.Lock()
	mock.calls.GetWorkflowData = append(mock.calls.GetWorkflowData, callInfo)
	mock.lockGetWorkflowData.Unlock()
	return mock.GetWorkflowDataFunc(ctx, in, opts...)
}

// GetWorkflowDataCalls gets all the calls that were made to GetWorkflowData.
// Check the length with:
//     len(mockedWorkflowServiceClient.GetWorkflowDataCalls())
func (mock *WorkflowServiceClientMock) GetWorkflowDataCalls() []struct {
	Ctx  context.Context
	In   *GetWorkflowDataRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *GetWorkflowDataRequest
		Opts []grpc.CallOption
	}
	mock.lockGetWorkflowData.RLock()
	calls = mock.calls.GetWorkflowData
	mock.lockGetWorkflowData.RUnlock()
	return calls
}

// GetWorkflowDataVersion calls GetWorkflowDataVersionFunc.
func (mock *WorkflowServiceClientMock) GetWorkflowDataVersion(ctx context.Context, in *GetWorkflowDataRequest, opts ...grpc.CallOption) (*GetWorkflowDataResponse, error) {
	if mock.GetWorkflowDataVersionFunc == nil {
		panic("WorkflowServiceClientMock.GetWorkflowDataVersionFunc: method is nil but WorkflowServiceClient.GetWorkflowDataVersion was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *GetWorkflowDataRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetWorkflowDataVersion.Lock()
	mock.calls.GetWorkflowDataVersion = append(mock.calls.GetWorkflowDataVersion, callInfo)
	mock.lockGetWorkflowDataVersion.Unlock()
	return mock.GetWorkflowDataVersionFunc(ctx, in, opts...)
}

// GetWorkflowDataVersionCalls gets all the calls that were made to GetWorkflowDataVersion.
// Check the length with:
//     len(mockedWorkflowServiceClient.GetWorkflowDataVersionCalls())
func (mock *WorkflowServiceClientMock) GetWorkflowDataVersionCalls() []struct {
	Ctx  context.Context
	In   *GetWorkflowDataRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *GetWorkflowDataRequest
		Opts []grpc.CallOption
	}
	mock.lockGetWorkflowDataVersion.RLock()
	calls = mock.calls.GetWorkflowDataVersion
	mock.lockGetWorkflowDataVersion.RUnlock()
	return calls
}

// GetWorkflowMetadata calls GetWorkflowMetadataFunc.
func (mock *WorkflowServiceClientMock) GetWorkflowMetadata(ctx context.Context, in *GetWorkflowDataRequest, opts ...grpc.CallOption) (*GetWorkflowDataResponse, error) {
	if mock.GetWorkflowMetadataFunc == nil {
		panic("WorkflowServiceClientMock.GetWorkflowMetadataFunc: method is nil but WorkflowServiceClient.GetWorkflowMetadata was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *GetWorkflowDataRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetWorkflowMetadata.Lock()
	mock.calls.GetWorkflowMetadata = append(mock.calls.GetWorkflowMetadata, callInfo)
	mock.lockGetWorkflowMetadata.Unlock()
	return mock.GetWorkflowMetadataFunc(ctx, in, opts...)
}

// GetWorkflowMetadataCalls gets all the calls that were made to GetWorkflowMetadata.
// Check the length with:
//     len(mockedWorkflowServiceClient.GetWorkflowMetadataCalls())
func (mock *WorkflowServiceClientMock) GetWorkflowMetadataCalls() []struct {
	Ctx  context.Context
	In   *GetWorkflowDataRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *GetWorkflowDataRequest
		Opts []grpc.CallOption
	}
	mock.lockGetWorkflowMetadata.RLock()
	calls = mock.calls.GetWorkflowMetadata
	mock.lockGetWorkflowMetadata.RUnlock()
	return calls
}

// ListWorkflows calls ListWorkflowsFunc.
func (mock *WorkflowServiceClientMock) ListWorkflows(ctx context.Context, in *Empty, opts ...grpc.CallOption) (WorkflowService_ListWorkflowsClient, error) {
	if mock.ListWorkflowsFunc == nil {
		panic("WorkflowServiceClientMock.ListWorkflowsFunc: method is nil but WorkflowServiceClient.ListWorkflows was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *Empty
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockListWorkflows.Lock()
	mock.calls.ListWorkflows = append(mock.calls.ListWorkflows, callInfo)
	mock.lockListWorkflows.Unlock()
	return mock.ListWorkflowsFunc(ctx, in, opts...)
}

// ListWorkflowsCalls gets all the calls that were made to ListWorkflows.
// Check the length with:
//     len(mockedWorkflowServiceClient.ListWorkflowsCalls())
func (mock *WorkflowServiceClientMock) ListWorkflowsCalls() []struct {
	Ctx  context.Context
	In   *Empty
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *Empty
		Opts []grpc.CallOption
	}
	mock.lockListWorkflows.RLock()
	calls = mock.calls.ListWorkflows
	mock.lockListWorkflows.RUnlock()
	return calls
}

// ReportActionStatus calls ReportActionStatusFunc.
func (mock *WorkflowServiceClientMock) ReportActionStatus(ctx context.Context, in *WorkflowActionStatus, opts ...grpc.CallOption) (*Empty, error) {
	if mock.ReportActionStatusFunc == nil {
		panic("WorkflowServiceClientMock.ReportActionStatusFunc: method is nil but WorkflowServiceClient.ReportActionStatus was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *WorkflowActionStatus
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockReportActionStatus.Lock()
	mock.calls.ReportActionStatus = append(mock.calls.ReportActionStatus, callInfo)
	mock.lockReportActionStatus.Unlock()
	return mock.ReportActionStatusFunc(ctx, in, opts...)
}

// ReportActionStatusCalls gets all the calls that were made to ReportActionStatus.
// Check the length with:
//     len(mockedWorkflowServiceClient.ReportActionStatusCalls())
func (mock *WorkflowServiceClientMock) ReportActionStatusCalls() []struct {
	Ctx  context.Context
	In   *WorkflowActionStatus
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *WorkflowActionStatus
		Opts []grpc.CallOption
	}
	mock.lockReportActionStatus.RLock()
	calls = mock.calls.ReportActionStatus
	mock.lockReportActionStatus.RUnlock()
	return calls
}

// ShowWorkflowEvents calls ShowWorkflowEventsFunc.
func (mock *WorkflowServiceClientMock) ShowWorkflowEvents(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (WorkflowService_ShowWorkflowEventsClient, error) {
	if mock.ShowWorkflowEventsFunc == nil {
		panic("WorkflowServiceClientMock.ShowWorkflowEventsFunc: method is nil but WorkflowServiceClient.ShowWorkflowEvents was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *GetRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockShowWorkflowEvents.Lock()
	mock.calls.ShowWorkflowEvents = append(mock.calls.ShowWorkflowEvents, callInfo)
	mock.lockShowWorkflowEvents.Unlock()
	return mock.ShowWorkflowEventsFunc(ctx, in, opts...)
}

// ShowWorkflowEventsCalls gets all the calls that were made to ShowWorkflowEvents.
// Check the length with:
//     len(mockedWorkflowServiceClient.ShowWorkflowEventsCalls())
func (mock *WorkflowServiceClientMock) ShowWorkflowEventsCalls() []struct {
	Ctx  context.Context
	In   *GetRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *GetRequest
		Opts []grpc.CallOption
	}
	mock.lockShowWorkflowEvents.RLock()
	calls = mock.calls.ShowWorkflowEvents
	mock.lockShowWorkflowEvents.RUnlock()
	return calls
}

// UpdateWorkflowData calls UpdateWorkflowDataFunc.
func (mock *WorkflowServiceClientMock) UpdateWorkflowData(ctx context.Context, in *UpdateWorkflowDataRequest, opts ...grpc.CallOption) (*Empty, error) {
	if mock.UpdateWorkflowDataFunc == nil {
		panic("WorkflowServiceClientMock.UpdateWorkflowDataFunc: method is nil but WorkflowServiceClient.UpdateWorkflowData was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *UpdateWorkflowDataRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockUpdateWorkflowData.Lock()
	mock.calls.UpdateWorkflowData = append(mock.calls.UpdateWorkflowData, callInfo)
	mock.lockUpdateWorkflowData.Unlock()
	return mock.UpdateWorkflowDataFunc(ctx, in, opts...)
}

// UpdateWorkflowDataCalls gets all the calls that were made to UpdateWorkflowData.
// Check the length with:
//     len(mockedWorkflowServiceClient.UpdateWorkflowDataCalls())
func (mock *WorkflowServiceClientMock) UpdateWorkflowDataCalls() []struct {
	Ctx  context.Context
	In   *UpdateWorkflowDataRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *UpdateWorkflowDataRequest
		Opts []grpc.CallOption
	}
	mock.lockUpdateWorkflowData.RLock()
	calls = mock.calls.UpdateWorkflowData
	mock.lockUpdateWorkflowData.RUnlock()
	return calls
}

// Ensure, that WorkflowService_ListWorkflowsClientMock does implement WorkflowService_ListWorkflowsClient.
// If this is not the case, regenerate this file with moq.
var _ WorkflowService_ListWorkflowsClient = &WorkflowService_ListWorkflowsClientMock{}

// WorkflowService_ListWorkflowsClientMock is a mock implementation of WorkflowService_ListWorkflowsClient.
//
//     func TestSomethingThatUsesWorkflowService_ListWorkflowsClient(t *testing.T) {
//
//         // make and configure a mocked WorkflowService_ListWorkflowsClient
//         mockedWorkflowService_ListWorkflowsClient := &WorkflowService_ListWorkflowsClientMock{
//             CloseSendFunc: func() error {
// 	               panic("mock out the CloseSend method")
//             },
//             ContextFunc: func() context.Context {
// 	               panic("mock out the Context method")
//             },
//             HeaderFunc: func() (metadata.MD, error) {
// 	               panic("mock out the Header method")
//             },
//             RecvFunc: func() (*Workflow, error) {
// 	               panic("mock out the Recv method")
//             },
//             RecvMsgFunc: func(m interface{}) error {
// 	               panic("mock out the RecvMsg method")
//             },
//             SendMsgFunc: func(m interface{}) error {
// 	               panic("mock out the SendMsg method")
//             },
//             TrailerFunc: func() metadata.MD {
// 	               panic("mock out the Trailer method")
//             },
//         }
//
//         // use mockedWorkflowService_ListWorkflowsClient in code that requires WorkflowService_ListWorkflowsClient
//         // and then make assertions.
//
//     }
type WorkflowService_ListWorkflowsClientMock struct {
	// CloseSendFunc mocks the CloseSend method.
	CloseSendFunc func() error

	// ContextFunc mocks the Context method.
	ContextFunc func() context.Context

	// HeaderFunc mocks the Header method.
	HeaderFunc func() (metadata.MD, error)

	// RecvFunc mocks the Recv method.
	RecvFunc func() (*Workflow, error)

	// RecvMsgFunc mocks the RecvMsg method.
	RecvMsgFunc func(m interface{}) error

	// SendMsgFunc mocks the SendMsg method.
	SendMsgFunc func(m interface{}) error

	// TrailerFunc mocks the Trailer method.
	TrailerFunc func() metadata.MD

	// calls tracks calls to the methods.
	calls struct {
		// CloseSend holds details about calls to the CloseSend method.
		CloseSend []struct {
		}
		// Context holds details about calls to the Context method.
		Context []struct {
		}
		// Header holds details about calls to the Header method.
		Header []struct {
		}
		// Recv holds details about calls to the Recv method.
		Recv []struct {
		}
		// RecvMsg holds details about calls to the RecvMsg method.
		RecvMsg []struct {
			// M is the m argument value.
			M interface{}
		}
		// SendMsg holds details about calls to the SendMsg method.
		SendMsg []struct {
			// M is the m argument value.
			M interface{}
		}
		// Trailer holds details about calls to the Trailer method.
		Trailer []struct {
		}
	}
	lockCloseSend sync.RWMutex
	lockContext   sync.RWMutex
	lockHeader    sync.RWMutex
	lockRecv      sync.RWMutex
	lockRecvMsg   sync.RWMutex
	lockSendMsg   sync.RWMutex
	lockTrailer   sync.RWMutex
}

// CloseSend calls CloseSendFunc.
func (mock *WorkflowService_ListWorkflowsClientMock) CloseSend() error {
	if mock.CloseSendFunc == nil {
		panic("WorkflowService_ListWorkflowsClientMock.CloseSendFunc: method is nil but WorkflowService_ListWorkflowsClient.CloseSend was just called")
	}
	callInfo := struct {
	}{}
	mock.lockCloseSend.Lock()
	mock.calls.CloseSend = append(mock.calls.CloseSend, callInfo)
	mock.lockCloseSend.Unlock()
	return mock.CloseSendFunc()
}

// CloseSendCalls gets all the calls that were made to CloseSend.
// Check the length with:
//     len(mockedWorkflowService_ListWorkflowsClient.CloseSendCalls())
func (mock *WorkflowService_ListWorkflowsClientMock) CloseSendCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockCloseSend.RLock()
	calls = mock.calls.CloseSend
	mock.lockCloseSend.RUnlock()
	return calls
}

// Context calls ContextFunc.
func (mock *WorkflowService_ListWorkflowsClientMock) Context() context.Context {
	if mock.ContextFunc == nil {
		panic("WorkflowService_ListWorkflowsClientMock.ContextFunc: method is nil but WorkflowService_ListWorkflowsClient.Context was just called")
	}
	callInfo := struct {
	}{}
	mock.lockContext.Lock()
	mock.calls.Context = append(mock.calls.Context, callInfo)
	mock.lockContext.Unlock()
	return mock.ContextFunc()
}

// ContextCalls gets all the calls that were made to Context.
// Check the length with:
//     len(mockedWorkflowService_ListWorkflowsClient.ContextCalls())
func (mock *WorkflowService_ListWorkflowsClientMock) ContextCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockContext.RLock()
	calls = mock.calls.Context
	mock.lockContext.RUnlock()
	return calls
}

// Header calls HeaderFunc.
func (mock *WorkflowService_ListWorkflowsClientMock) Header() (metadata.MD, error) {
	if mock.HeaderFunc == nil {
		panic("WorkflowService_ListWorkflowsClientMock.HeaderFunc: method is nil but WorkflowService_ListWorkflowsClient.Header was just called")
	}
	callInfo := struct {
	}{}
	mock.lockHeader.Lock()
	mock.calls.Header = append(mock.calls.Header, callInfo)
	mock.lockHeader.Unlock()
	return mock.HeaderFunc()
}

// HeaderCalls gets all the calls that were made to Header.
// Check the length with:
//     len(mockedWorkflowService_ListWorkflowsClient.HeaderCalls())
func (mock *WorkflowService_ListWorkflowsClientMock) HeaderCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockHeader.RLock()
	calls = mock.calls.Header
	mock.lockHeader.RUnlock()
	return calls
}

// Recv calls RecvFunc.
func (mock *WorkflowService_ListWorkflowsClientMock) Recv() (*Workflow, error) {
	if mock.RecvFunc == nil {
		panic("WorkflowService_ListWorkflowsClientMock.RecvFunc: method is nil but WorkflowService_ListWorkflowsClient.Recv was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRecv.Lock()
	mock.calls.Recv = append(mock.calls.Recv, callInfo)
	mock.lockRecv.Unlock()
	return mock.RecvFunc()
}

// RecvCalls gets all the calls that were made to Recv.
// Check the length with:
//     len(mockedWorkflowService_ListWorkflowsClient.RecvCalls())
func (mock *WorkflowService_ListWorkflowsClientMock) RecvCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRecv.RLock()
	calls = mock.calls.Recv
	mock.lockRecv.RUnlock()
	return calls
}

// RecvMsg calls RecvMsgFunc.
func (mock *WorkflowService_ListWorkflowsClientMock) RecvMsg(m interface{}) error {
	if mock.RecvMsgFunc == nil {
		panic("WorkflowService_ListWorkflowsClientMock.RecvMsgFunc: method is nil but WorkflowService_ListWorkflowsClient.RecvMsg was just called")
	}
	callInfo := struct {
		M interface{}
	}{
		M: m,
	}
	mock.lockRecvMsg.Lock()
	mock.calls.RecvMsg = append(mock.calls.RecvMsg, callInfo)
	mock.lockRecvMsg.Unlock()
	return mock.RecvMsgFunc(m)
}

// RecvMsgCalls gets all the calls that were made to RecvMsg.
// Check the length with:
//     len(mockedWorkflowService_ListWorkflowsClient.RecvMsgCalls())
func (mock *WorkflowService_ListWorkflowsClientMock) RecvMsgCalls() []struct {
	M interface{}
} {
	var calls []struct {
		M interface{}
	}
	mock.lockRecvMsg.RLock()
	calls = mock.calls.RecvMsg
	mock.lockRecvMsg.RUnlock()
	return calls
}

// SendMsg calls SendMsgFunc.
func (mock *WorkflowService_ListWorkflowsClientMock) SendMsg(m interface{}) error {
	if mock.SendMsgFunc == nil {
		panic("WorkflowService_ListWorkflowsClientMock.SendMsgFunc: method is nil but WorkflowService_ListWorkflowsClient.SendMsg was just called")
	}
	callInfo := struct {
		M interface{}
	}{
		M: m,
	}
	mock.lockSendMsg.Lock()
	mock.calls.SendMsg = append(mock.calls.SendMsg, callInfo)
	mock.lockSendMsg.Unlock()
	return mock.SendMsgFunc(m)
}

// SendMsgCalls gets all the calls that were made to SendMsg.
// Check the length with:
//     len(mockedWorkflowService_ListWorkflowsClient.SendMsgCalls())
func (mock *WorkflowService_ListWorkflowsClientMock) SendMsgCalls() []struct {
	M interface{}
} {
	var calls []struct {
		M interface{}
	}
	mock.lockSendMsg.RLock()
	calls = mock.calls.SendMsg
	mock.lockSendMsg.RUnlock()
	return calls
}

// Trailer calls TrailerFunc.
func (mock *WorkflowService_ListWorkflowsClientMock) Trailer() metadata.MD {
	if mock.TrailerFunc == nil {
		panic("WorkflowService_ListWorkflowsClientMock.TrailerFunc: method is nil but WorkflowService_ListWorkflowsClient.Trailer was just called")
	}
	callInfo := struct {
	}{}
	mock.lockTrailer.Lock()
	mock.calls.Trailer = append(mock.calls.Trailer, callInfo)
	mock.lockTrailer.Unlock()
	return mock.TrailerFunc()
}

// TrailerCalls gets all the calls that were made to Trailer.
// Check the length with:
//     len(mockedWorkflowService_ListWorkflowsClient.TrailerCalls())
func (mock *WorkflowService_ListWorkflowsClientMock) TrailerCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockTrailer.RLock()
	calls = mock.calls.Trailer
	mock.lockTrailer.RUnlock()
	return calls
}
