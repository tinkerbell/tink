// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package template

import (
	"context"
	"sync"

	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// Ensure, that TemplateServiceClientMock does implement TemplateServiceClient.
// If this is not the case, regenerate this file with moq.
var _ TemplateServiceClient = &TemplateServiceClientMock{}

// TemplateServiceClientMock is a mock implementation of TemplateServiceClient.
//
//     func TestSomethingThatUsesTemplateServiceClient(t *testing.T) {
//
//         // make and configure a mocked TemplateServiceClient
//         mockedTemplateServiceClient := &TemplateServiceClientMock{
//             CreateTemplateFunc: func(ctx context.Context, in *WorkflowTemplate, opts ...grpc.CallOption) (*CreateResponse, error) {
// 	               panic("mock out the CreateTemplate method")
//             },
//             DeleteTemplateFunc: func(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Empty, error) {
// 	               panic("mock out the DeleteTemplate method")
//             },
//             GetTemplateFunc: func(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*WorkflowTemplate, error) {
// 	               panic("mock out the GetTemplate method")
//             },
//             ListTemplatesFunc: func(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (TemplateService_ListTemplatesClient, error) {
// 	               panic("mock out the ListTemplates method")
//             },
//             UpdateTemplateFunc: func(ctx context.Context, in *WorkflowTemplate, opts ...grpc.CallOption) (*Empty, error) {
// 	               panic("mock out the UpdateTemplate method")
//             },
//         }
//
//         // use mockedTemplateServiceClient in code that requires TemplateServiceClient
//         // and then make assertions.
//
//     }
type TemplateServiceClientMock struct {
	// CreateTemplateFunc mocks the CreateTemplate method.
	CreateTemplateFunc func(ctx context.Context, in *WorkflowTemplate, opts ...grpc.CallOption) (*CreateResponse, error)

	// DeleteTemplateFunc mocks the DeleteTemplate method.
	DeleteTemplateFunc func(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Empty, error)

	// GetTemplateFunc mocks the GetTemplate method.
	GetTemplateFunc func(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*WorkflowTemplate, error)

	// ListTemplatesFunc mocks the ListTemplates method.
	ListTemplatesFunc func(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (TemplateService_ListTemplatesClient, error)

	// UpdateTemplateFunc mocks the UpdateTemplate method.
	UpdateTemplateFunc func(ctx context.Context, in *WorkflowTemplate, opts ...grpc.CallOption) (*Empty, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateTemplate holds details about calls to the CreateTemplate method.
		CreateTemplate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *WorkflowTemplate
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// DeleteTemplate holds details about calls to the DeleteTemplate method.
		DeleteTemplate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *GetRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// GetTemplate holds details about calls to the GetTemplate method.
		GetTemplate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *GetRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// ListTemplates holds details about calls to the ListTemplates method.
		ListTemplates []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *ListRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// UpdateTemplate holds details about calls to the UpdateTemplate method.
		UpdateTemplate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *WorkflowTemplate
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
	}
	lockCreateTemplate sync.RWMutex
	lockDeleteTemplate sync.RWMutex
	lockGetTemplate    sync.RWMutex
	lockListTemplates  sync.RWMutex
	lockUpdateTemplate sync.RWMutex
}

// CreateTemplate calls CreateTemplateFunc.
func (mock *TemplateServiceClientMock) CreateTemplate(ctx context.Context, in *WorkflowTemplate, opts ...grpc.CallOption) (*CreateResponse, error) {
	if mock.CreateTemplateFunc == nil {
		panic("TemplateServiceClientMock.CreateTemplateFunc: method is nil but TemplateServiceClient.CreateTemplate was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *WorkflowTemplate
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockCreateTemplate.Lock()
	mock.calls.CreateTemplate = append(mock.calls.CreateTemplate, callInfo)
	mock.lockCreateTemplate.Unlock()
	return mock.CreateTemplateFunc(ctx, in, opts...)
}

// CreateTemplateCalls gets all the calls that were made to CreateTemplate.
// Check the length with:
//     len(mockedTemplateServiceClient.CreateTemplateCalls())
func (mock *TemplateServiceClientMock) CreateTemplateCalls() []struct {
	Ctx  context.Context
	In   *WorkflowTemplate
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *WorkflowTemplate
		Opts []grpc.CallOption
	}
	mock.lockCreateTemplate.RLock()
	calls = mock.calls.CreateTemplate
	mock.lockCreateTemplate.RUnlock()
	return calls
}

// DeleteTemplate calls DeleteTemplateFunc.
func (mock *TemplateServiceClientMock) DeleteTemplate(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Empty, error) {
	if mock.DeleteTemplateFunc == nil {
		panic("TemplateServiceClientMock.DeleteTemplateFunc: method is nil but TemplateServiceClient.DeleteTemplate was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *GetRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockDeleteTemplate.Lock()
	mock.calls.DeleteTemplate = append(mock.calls.DeleteTemplate, callInfo)
	mock.lockDeleteTemplate.Unlock()
	return mock.DeleteTemplateFunc(ctx, in, opts...)
}

// DeleteTemplateCalls gets all the calls that were made to DeleteTemplate.
// Check the length with:
//     len(mockedTemplateServiceClient.DeleteTemplateCalls())
func (mock *TemplateServiceClientMock) DeleteTemplateCalls() []struct {
	Ctx  context.Context
	In   *GetRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *GetRequest
		Opts []grpc.CallOption
	}
	mock.lockDeleteTemplate.RLock()
	calls = mock.calls.DeleteTemplate
	mock.lockDeleteTemplate.RUnlock()
	return calls
}

// GetTemplate calls GetTemplateFunc.
func (mock *TemplateServiceClientMock) GetTemplate(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*WorkflowTemplate, error) {
	if mock.GetTemplateFunc == nil {
		panic("TemplateServiceClientMock.GetTemplateFunc: method is nil but TemplateServiceClient.GetTemplate was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *GetRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetTemplate.Lock()
	mock.calls.GetTemplate = append(mock.calls.GetTemplate, callInfo)
	mock.lockGetTemplate.Unlock()
	return mock.GetTemplateFunc(ctx, in, opts...)
}

// GetTemplateCalls gets all the calls that were made to GetTemplate.
// Check the length with:
//     len(mockedTemplateServiceClient.GetTemplateCalls())
func (mock *TemplateServiceClientMock) GetTemplateCalls() []struct {
	Ctx  context.Context
	In   *GetRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *GetRequest
		Opts []grpc.CallOption
	}
	mock.lockGetTemplate.RLock()
	calls = mock.calls.GetTemplate
	mock.lockGetTemplate.RUnlock()
	return calls
}

// ListTemplates calls ListTemplatesFunc.
func (mock *TemplateServiceClientMock) ListTemplates(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (TemplateService_ListTemplatesClient, error) {
	if mock.ListTemplatesFunc == nil {
		panic("TemplateServiceClientMock.ListTemplatesFunc: method is nil but TemplateServiceClient.ListTemplates was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *ListRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockListTemplates.Lock()
	mock.calls.ListTemplates = append(mock.calls.ListTemplates, callInfo)
	mock.lockListTemplates.Unlock()
	return mock.ListTemplatesFunc(ctx, in, opts...)
}

// ListTemplatesCalls gets all the calls that were made to ListTemplates.
// Check the length with:
//     len(mockedTemplateServiceClient.ListTemplatesCalls())
func (mock *TemplateServiceClientMock) ListTemplatesCalls() []struct {
	Ctx  context.Context
	In   *ListRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *ListRequest
		Opts []grpc.CallOption
	}
	mock.lockListTemplates.RLock()
	calls = mock.calls.ListTemplates
	mock.lockListTemplates.RUnlock()
	return calls
}

// UpdateTemplate calls UpdateTemplateFunc.
func (mock *TemplateServiceClientMock) UpdateTemplate(ctx context.Context, in *WorkflowTemplate, opts ...grpc.CallOption) (*Empty, error) {
	if mock.UpdateTemplateFunc == nil {
		panic("TemplateServiceClientMock.UpdateTemplateFunc: method is nil but TemplateServiceClient.UpdateTemplate was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *WorkflowTemplate
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockUpdateTemplate.Lock()
	mock.calls.UpdateTemplate = append(mock.calls.UpdateTemplate, callInfo)
	mock.lockUpdateTemplate.Unlock()
	return mock.UpdateTemplateFunc(ctx, in, opts...)
}

// UpdateTemplateCalls gets all the calls that were made to UpdateTemplate.
// Check the length with:
//     len(mockedTemplateServiceClient.UpdateTemplateCalls())
func (mock *TemplateServiceClientMock) UpdateTemplateCalls() []struct {
	Ctx  context.Context
	In   *WorkflowTemplate
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *WorkflowTemplate
		Opts []grpc.CallOption
	}
	mock.lockUpdateTemplate.RLock()
	calls = mock.calls.UpdateTemplate
	mock.lockUpdateTemplate.RUnlock()
	return calls
}

// Ensure, that TemplateService_ListTemplatesClientMock does implement TemplateService_ListTemplatesClient.
// If this is not the case, regenerate this file with moq.
var _ TemplateService_ListTemplatesClient = &TemplateService_ListTemplatesClientMock{}

// TemplateService_ListTemplatesClientMock is a mock implementation of TemplateService_ListTemplatesClient.
//
//     func TestSomethingThatUsesTemplateService_ListTemplatesClient(t *testing.T) {
//
//         // make and configure a mocked TemplateService_ListTemplatesClient
//         mockedTemplateService_ListTemplatesClient := &TemplateService_ListTemplatesClientMock{
//             CloseSendFunc: func() error {
// 	               panic("mock out the CloseSend method")
//             },
//             ContextFunc: func() context.Context {
// 	               panic("mock out the Context method")
//             },
//             HeaderFunc: func() (metadata.MD, error) {
// 	               panic("mock out the Header method")
//             },
//             RecvFunc: func() (*WorkflowTemplate, error) {
// 	               panic("mock out the Recv method")
//             },
//             RecvMsgFunc: func(m interface{}) error {
// 	               panic("mock out the RecvMsg method")
//             },
//             SendMsgFunc: func(m interface{}) error {
// 	               panic("mock out the SendMsg method")
//             },
//             TrailerFunc: func() metadata.MD {
// 	               panic("mock out the Trailer method")
//             },
//         }
//
//         // use mockedTemplateService_ListTemplatesClient in code that requires TemplateService_ListTemplatesClient
//         // and then make assertions.
//
//     }
type TemplateService_ListTemplatesClientMock struct {
	// CloseSendFunc mocks the CloseSend method.
	CloseSendFunc func() error

	// ContextFunc mocks the Context method.
	ContextFunc func() context.Context

	// HeaderFunc mocks the Header method.
	HeaderFunc func() (metadata.MD, error)

	// RecvFunc mocks the Recv method.
	RecvFunc func() (*WorkflowTemplate, error)

	// RecvMsgFunc mocks the RecvMsg method.
	RecvMsgFunc func(m interface{}) error

	// SendMsgFunc mocks the SendMsg method.
	SendMsgFunc func(m interface{}) error

	// TrailerFunc mocks the Trailer method.
	TrailerFunc func() metadata.MD

	// calls tracks calls to the methods.
	calls struct {
		// CloseSend holds details about calls to the CloseSend method.
		CloseSend []struct {
		}
		// Context holds details about calls to the Context method.
		Context []struct {
		}
		// Header holds details about calls to the Header method.
		Header []struct {
		}
		// Recv holds details about calls to the Recv method.
		Recv []struct {
		}
		// RecvMsg holds details about calls to the RecvMsg method.
		RecvMsg []struct {
			// M is the m argument value.
			M interface{}
		}
		// SendMsg holds details about calls to the SendMsg method.
		SendMsg []struct {
			// M is the m argument value.
			M interface{}
		}
		// Trailer holds details about calls to the Trailer method.
		Trailer []struct {
		}
	}
	lockCloseSend sync.RWMutex
	lockContext   sync.RWMutex
	lockHeader    sync.RWMutex
	lockRecv      sync.RWMutex
	lockRecvMsg   sync.RWMutex
	lockSendMsg   sync.RWMutex
	lockTrailer   sync.RWMutex
}

// CloseSend calls CloseSendFunc.
func (mock *TemplateService_ListTemplatesClientMock) CloseSend() error {
	if mock.CloseSendFunc == nil {
		panic("TemplateService_ListTemplatesClientMock.CloseSendFunc: method is nil but TemplateService_ListTemplatesClient.CloseSend was just called")
	}
	callInfo := struct {
	}{}
	mock.lockCloseSend.Lock()
	mock.calls.CloseSend = append(mock.calls.CloseSend, callInfo)
	mock.lockCloseSend.Unlock()
	return mock.CloseSendFunc()
}

// CloseSendCalls gets all the calls that were made to CloseSend.
// Check the length with:
//     len(mockedTemplateService_ListTemplatesClient.CloseSendCalls())
func (mock *TemplateService_ListTemplatesClientMock) CloseSendCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockCloseSend.RLock()
	calls = mock.calls.CloseSend
	mock.lockCloseSend.RUnlock()
	return calls
}

// Context calls ContextFunc.
func (mock *TemplateService_ListTemplatesClientMock) Context() context.Context {
	if mock.ContextFunc == nil {
		panic("TemplateService_ListTemplatesClientMock.ContextFunc: method is nil but TemplateService_ListTemplatesClient.Context was just called")
	}
	callInfo := struct {
	}{}
	mock.lockContext.Lock()
	mock.calls.Context = append(mock.calls.Context, callInfo)
	mock.lockContext.Unlock()
	return mock.ContextFunc()
}

// ContextCalls gets all the calls that were made to Context.
// Check the length with:
//     len(mockedTemplateService_ListTemplatesClient.ContextCalls())
func (mock *TemplateService_ListTemplatesClientMock) ContextCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockContext.RLock()
	calls = mock.calls.Context
	mock.lockContext.RUnlock()
	return calls
}

// Header calls HeaderFunc.
func (mock *TemplateService_ListTemplatesClientMock) Header() (metadata.MD, error) {
	if mock.HeaderFunc == nil {
		panic("TemplateService_ListTemplatesClientMock.HeaderFunc: method is nil but TemplateService_ListTemplatesClient.Header was just called")
	}
	callInfo := struct {
	}{}
	mock.lockHeader.Lock()
	mock.calls.Header = append(mock.calls.Header, callInfo)
	mock.lockHeader.Unlock()
	return mock.HeaderFunc()
}

// HeaderCalls gets all the calls that were made to Header.
// Check the length with:
//     len(mockedTemplateService_ListTemplatesClient.HeaderCalls())
func (mock *TemplateService_ListTemplatesClientMock) HeaderCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockHeader.RLock()
	calls = mock.calls.Header
	mock.lockHeader.RUnlock()
	return calls
}

// Recv calls RecvFunc.
func (mock *TemplateService_ListTemplatesClientMock) Recv() (*WorkflowTemplate, error) {
	if mock.RecvFunc == nil {
		panic("TemplateService_ListTemplatesClientMock.RecvFunc: method is nil but TemplateService_ListTemplatesClient.Recv was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRecv.Lock()
	mock.calls.Recv = append(mock.calls.Recv, callInfo)
	mock.lockRecv.Unlock()
	return mock.RecvFunc()
}

// RecvCalls gets all the calls that were made to Recv.
// Check the length with:
//     len(mockedTemplateService_ListTemplatesClient.RecvCalls())
func (mock *TemplateService_ListTemplatesClientMock) RecvCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRecv.RLock()
	calls = mock.calls.Recv
	mock.lockRecv.RUnlock()
	return calls
}

// RecvMsg calls RecvMsgFunc.
func (mock *TemplateService_ListTemplatesClientMock) RecvMsg(m interface{}) error {
	if mock.RecvMsgFunc == nil {
		panic("TemplateService_ListTemplatesClientMock.RecvMsgFunc: method is nil but TemplateService_ListTemplatesClient.RecvMsg was just called")
	}
	callInfo := struct {
		M interface{}
	}{
		M: m,
	}
	mock.lockRecvMsg.Lock()
	mock.calls.RecvMsg = append(mock.calls.RecvMsg, callInfo)
	mock.lockRecvMsg.Unlock()
	return mock.RecvMsgFunc(m)
}

// RecvMsgCalls gets all the calls that were made to RecvMsg.
// Check the length with:
//     len(mockedTemplateService_ListTemplatesClient.RecvMsgCalls())
func (mock *TemplateService_ListTemplatesClientMock) RecvMsgCalls() []struct {
	M interface{}
} {
	var calls []struct {
		M interface{}
	}
	mock.lockRecvMsg.RLock()
	calls = mock.calls.RecvMsg
	mock.lockRecvMsg.RUnlock()
	return calls
}

// SendMsg calls SendMsgFunc.
func (mock *TemplateService_ListTemplatesClientMock) SendMsg(m interface{}) error {
	if mock.SendMsgFunc == nil {
		panic("TemplateService_ListTemplatesClientMock.SendMsgFunc: method is nil but TemplateService_ListTemplatesClient.SendMsg was just called")
	}
	callInfo := struct {
		M interface{}
	}{
		M: m,
	}
	mock.lockSendMsg.Lock()
	mock.calls.SendMsg = append(mock.calls.SendMsg, callInfo)
	mock.lockSendMsg.Unlock()
	return mock.SendMsgFunc(m)
}

// SendMsgCalls gets all the calls that were made to SendMsg.
// Check the length with:
//     len(mockedTemplateService_ListTemplatesClient.SendMsgCalls())
func (mock *TemplateService_ListTemplatesClientMock) SendMsgCalls() []struct {
	M interface{}
} {
	var calls []struct {
		M interface{}
	}
	mock.lockSendMsg.RLock()
	calls = mock.calls.SendMsg
	mock.lockSendMsg.RUnlock()
	return calls
}

// Trailer calls TrailerFunc.
func (mock *TemplateService_ListTemplatesClientMock) Trailer() metadata.MD {
	if mock.TrailerFunc == nil {
		panic("TemplateService_ListTemplatesClientMock.TrailerFunc: method is nil but TemplateService_ListTemplatesClient.Trailer was just called")
	}
	callInfo := struct {
	}{}
	mock.lockTrailer.Lock()
	mock.calls.Trailer = append(mock.calls.Trailer, callInfo)
	mock.lockTrailer.Unlock()
	return mock.TrailerFunc()
}

// TrailerCalls gets all the calls that were made to Trailer.
// Check the length with:
//     len(mockedTemplateService_ListTemplatesClient.TrailerCalls())
func (mock *TemplateService_ListTemplatesClientMock) TrailerCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockTrailer.RLock()
	calls = mock.calls.Trailer
	mock.lockTrailer.RUnlock()
	return calls
}
